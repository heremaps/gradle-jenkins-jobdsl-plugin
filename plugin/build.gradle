buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2'
        }
    }

    dependencies {
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.7'
    }
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'com.gradle.plugin-publish'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    maven {
        url 'https://repo.jenkins-ci.org/releases/'
    }

    maven {
        url 'https://plugins.gradle.org/m2'
    }

    jcenter()
}

configurations {
    jenkinsPlugins {
        description 'Dependencies on Jenkins plugins that are used in functional tests.'
    }
}

sourceSets {
    functionalTest {
        groovy {
            srcDir 'src/functionalTest/groovy'
        }
        resources {
            srcDir 'src/functionalTest/resources'
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    compile localGroovy()
    compile('org.jenkins-ci.plugins:job-dsl-core:1.66') {
        exclude(module: 'groovy-all')
    }
    compile 'org.jenkins-ci.plugins:job-dsl:1.66@jar'
    compile 'org.jenkins-ci:version-number:1.4'

    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
        exclude(module: 'groovy')
        exclude(module: 'xercesImpl')
    }

    // Need to exclude XML parsers: https://issues.jenkins-ci.org/browse/JENKINS-35638
    compile('org.jenkins-ci.main:jenkins-test-harness:2.32') {
        exclude(module: 'org-netbeans-insane')
        exclude(module: 'serializer')
        exclude(module: 'xalan')
        exclude(module: 'xercesImpl')
    }

    compile('org.jenkins-ci.main:jenkins-war:2.92') {
        exclude(module: 'groovy-all')
        exclude(module: 'slf4j-jdk14')
        exclude(module: 'xalan')
    }

    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    functionalTestCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    functionalTestCompile('org.jenkins-ci.main:jenkins-war:2.92') {
        exclude(module: 'groovy-all')
        exclude(module: 'slf4j-jdk14')
    }

    // Need to exclude transitive dependency because of: https://github.com/gradle/gradle/issues/3666
    functionalTestCompile('org.jenkins-ci.main:jenkins-test-harness:2.32') {
        exclude(module: 'org-netbeans-insane')
    }

    functionalTestCompile 'org.jenkins-ci.plugins:cloudbees-folder:6.1.0@jar'

    // Plugins to be available for single tests using the @WithPlugin annotation.
    jenkinsPlugins 'org.jenkins-ci.plugins:cloudbees-folder:6.1.0'
    jenkinsPlugins 'org.jenkins-ci.plugins:gradle:1.22' // Old version used to test reporting of outdated plugins.
    jenkinsPlugins 'org.jenkins-ci.plugins:htmlpublisher:1.12' // Used to test reporting of deprecated plugins.
}

task resolveTestPlugins(type: Copy) {
    from configurations.jenkinsPlugins
    into new File(sourceSets.functionalTest.output.resourcesDir, 'plugins')
    include '*.hpi'
    include '*.jpi'

    doLast {
        def baseNames = source.collect { it.name.take(it.name.lastIndexOf('.')) }
        new File(destinationDir, 'index') << baseNames.join('\n')
    }
}

task functionalTest(type: Test, dependsOn: resolveTestPlugins) {
    group = 'verification'
    description = 'Runs the functional tests.'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("${buildDir}/reports/functionalTests")

    // Set build directory for Jenkins test harness, see https://issues.jenkins-ci.org/browse/JENKINS-26331.
    systemProperty 'buildDirectory', project.buildDir.absolutePath
    systemProperty 'hudson.Main.development', 'true'

    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
    }
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest

    plugins {
        jobDslPlugin {
            id = 'com.here.jobdsl'
            implementationClass = 'com.here.gradle.plugins.jobdsl.JobDslPlugin'
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    from groovydoc.destinationDir
    classifier = 'groovydoc'
}

def pomConfig = {
    licenses {
        license {
            name 'Apache-2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0'
        }
    }
}

def pluginVersion() {
    project.properties['maven.release'] == 'true' ?
            project.properties['maven.version'] - '-SNAPSHOT' : project.properties['maven.version']
}

// Configuration for manual publication, e.g. to Maven local.
publishing {
    publications {
        maven(MavenPublication) {
            groupId project.properties['maven.groupId']
            artifactId project.properties['maven.artifactId']
            version pluginVersion()

            from components.java

            artifact sourceJar
            artifact groovydocJar

            pom.withXml {
                asNode().children().last() + {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }

    repositories {
        maven {
            url "${buildDir}/repo"
        }
    }
}

// Configuration for publication to the Gradle plugin registry.
pluginBundle {
    website = 'https://github.com/heremaps/gradle-jenkins-jobdsl-plugin'
    vcsUrl = 'git@github.com:heremaps/gradle-jenkins-jobdsl-plugin.git'
    description = 'A Gradle plugin to manage Jenkins Job DSL scripts.'

    plugins {
        jobDslPlugin {
            id = 'com.here.jobdsl'
            displayName = 'Gradle Job DSL Plugin'
            tags = ['jenkins', 'job-dsl']
            version = pluginVersion()
        }
    }

    mavenCoordinates {
        groupId = project.properties['maven.groupId']
        artifactId = project.properties['maven.artifactId']
        version = pluginVersion()
    }
}
